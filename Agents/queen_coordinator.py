# -*- coding: utf-8 -*-
"""queen_coordinator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1W0VgAnWJCyFBReRov_XCM6tPnWBtrtxn
"""

from google.colab import drive
import os, json

# Mount Google Drive
drive.mount('/content/drive', force_remount=True)

# Path to registry file in your Drive
REGISTRY = '/content/drive/MyDrive/agent_urls.json'

# Load or initialize the list of agent URLs
if os.path.exists(REGISTRY):
    with open(REGISTRY, 'r') as f:
        AGENTS = json.load(f)
else:
    AGENTS = []

print("Discovered agents:", AGENTS)

# Cell 2 (updated): Imports & Coordinator Function with HTTP retrain

import requests
import urllib3

# (Optional) hide the insecure‚Äêrequest warning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

def coordinate(prompt, timeout=60, retrain_threshold=0.5):
    """
    Broadcast `prompt` to each agent in AGENTS,
    collect responses/scores, elect a queen, and
    trigger retraining for underperformers.
    """
    results = []
    for url in AGENTS:
        try:
            # 1) /respond stays HTTPS (it works OK)
            resp = requests.post(
                f"{url}/respond",
                json={"prompt": prompt},
                timeout=timeout
            )
            resp.raise_for_status()
            data = resp.json()
            results.append({
                "agent":    url,
                "response": data["response"],
                "score":    data["score"]
            })
        except Exception as e:
            print(f"‚ö†Ô∏è Error from {url}: {e}")

    if not results:
        print("‚ùå No valid responses.")
        return [], None

    # Elect the queen by highest score
    queen = max(results, key=lambda x: x["score"])

    # üîÑ Retrain underperformers over HTTP
    for r in results:
        if r["score"] < retrain_threshold:
            agent_http = r["agent"].replace("https://", "http://")
            try:
                rt = requests.post(
                    f"{agent_http}/retrain",
                    timeout=(5, 600),   # shorter connect, longer read
                    verify=False        # no SSL on HTTP but supresses warnings
                )
                print(f"üîÑ Retrained {r['agent']} ‚Üí {rt.status_code}")
            except Exception as e:
                print(f"‚ö†Ô∏è Retrain failed for {r['agent']}: {e}")

    return results, queen

prompt = "How can we slow down climate change with technology?"
all_responses, queen = coordinate(prompt)

print("\n--- All Agent Responses ---")
for r in all_responses:
    print(f"{r['agent']} | score={r['score']}\n{r['response']}\n")

if queen:
    print("üëë Queen:", queen["agent"], "score", queen["score"])
    print("Queen's response:\n", queen["response"])
else:
    print("No queen elected (no responses).")

# Enter a custom prompt to broadcast
user_prompt = input("Enter prompt for agents: ")
responses, queen = coordinate(user_prompt)

print("\n--- Agent Responses ---")
for r in responses:
    print(f"{r['agent']} | score={r['score']}\n{r['response']}\n")

if queen:
    print(f"üëë Elected Queen: {queen['agent']} (score {queen['score']})")
    print("Queen says:\n", queen['response'])

import pandas as pd

# Save last broadcast results
df = pd.DataFrame(responses)
output_path = '/content/drive/MyDrive/ai_swarm_results.csv'
df.to_csv(output_path, index=False)
print(f"Results saved to {output_path}")

import pandas as pd

# Load and display saved results
df = pd.read_csv('/content/drive/MyDrive/ai_swarm_results.csv')
df